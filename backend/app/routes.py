from fastapi import APIRouter, HTTPException, Query, UploadFile, File, Form
from typing import List, Optional, Dict, Any
import os
import shutil
import tempfile
from pathlib import Path

from app.models import ESGReport, ESGReportCreate
from app.database import (
    get_reports, 
    get_report, 
    create_report, 
    delete_report, 
    update_report, 
    save_processed_report
)

router = APIRouter()


@router.get("/reports", response_model=List[ESGReport])
async def read_reports(
    industry: Optional[str] = Query(None, description="Filter by industry"),
    year: Optional[int] = Query(None, description="Filter by year"),
    min_score: Optional[int] = Query(None, ge=0, le=100, description="Minimum ESG score"),
):
    """Get all ESG reports with optional filtering."""
    reports = get_reports()
    
    # Apply filters if provided
    if industry:
        reports = [r for r in reports if r.industry.lower() == industry.lower()]
    if year:
        reports = [r for r in reports if r.year == year]
    if min_score is not None:
        reports = [r for r in reports if r.esg_score >= min_score]
    
    return reports


@router.get("/reports/{report_id}", response_model=ESGReport)
async def read_report(report_id: str):
    """Get a specific ESG report by ID."""
    report = get_report(report_id)
    if report is None:
        raise HTTPException(status_code=404, detail="Reporte no encontrado")
    return report


@router.post("/reports", response_model=ESGReport)
async def create_new_report(report: ESGReportCreate):
    """Create a new ESG report."""
    return create_report(report)


@router.put("/reports/{report_id}", response_model=ESGReport)
async def update_existing_report(report_id: str, report_data: Dict[str, Any]):
    """Update a specific ESG report by ID."""
    updated_report = update_report(report_id, report_data)
    if updated_report is None:
        raise HTTPException(status_code=404, detail="Reporte no encontrado")
    return updated_report


@router.delete("/reports/{report_id}", response_model=bool)
async def delete_existing_report(report_id: str):
    """Delete a specific ESG report by ID."""
    result = delete_report(report_id)
    if not result:
        raise HTTPException(status_code=404, detail="Reporte no encontrado")
    return result


@router.post("/upload/pdf", response_model=ESGReport)
async def upload_and_process_pdf(
    file: UploadFile = File(...),
    company: str = Form(...),
    year: int = Form(...),
    industry: str = Form(...),
):
    """
    Upload and process a PDF file to extract ESG data
    
    This is a simplified version that doesn't actually do PDF processing,
    but in a real implementation, you would:
    1. Save the uploaded PDF
    2. Process it using NLP techniques
    3. Extract ESG metrics
    4. Generate scores
    5. Save the results
    """
    # Validate the file is a PDF
    if not file.filename.lower().endswith('.pdf'):
        raise HTTPException(status_code=400, detail="El archivo debe ser un PDF")
    
    # Create a temporary file to store the uploaded PDF
    with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp:
        # Copy uploaded content to the temp file
        shutil.copyfileobj(file.file, tmp)
        temp_path = Path(tmp.name)
    
    try:
        # Here you would process the PDF with your NLP models
        # For now, we'll just create a mock report
        
        # Mock ESG scores - in a real implementation these would be generated by NLP analysis
        esg_score = 75
        environment_score = 72
        social_score = 78
        governance_score = 74
        
        # Create the report data
        report_data = {
            "company": company,
            "ticker": company[:3].upper(),  # Mock ticker symbol
            "year": year,
            "industry": industry,
            "esg_score": esg_score,
            "environment_score": environment_score,
            "social_score": social_score,
            "governance_score": governance_score,
            "report_quality": "Medium",
            "publish_date": f"{year}-01-01",
            "file_url": f"/files/{file.filename}",
            "summary": f"Informe ESG procesado para {company} ({year}).",
            "strengths": [
                "Característica destacada 1",
                "Característica destacada 2",
                "Característica destacada 3",
            ],
            "weaknesses": [
                "Área de mejora 1",
                "Área de mejora 2",
            ],
            "recommendations": [
                "Recomendación 1",
                "Recomendación 2",
                "Recomendación 3",
            ],
            "key_metrics": {
                "carbonEmissions": "85,000 toneladas",
                "renewableEnergy": "40% del consumo total de energía",
                "diversityScore": "35% de mujeres en puestos directivos",
            }
        }
        
        # Save the processed report data
        report = save_processed_report(report_data)
        
        return report
        
    finally:
        # Clean up the temporary file
        if os.path.exists(temp_path):
            os.unlink(temp_path)


@router.get("/health")
async def health_check():
    """API health check endpoint."""
    return {"status": "ok"} 